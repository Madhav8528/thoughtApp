import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { GoogleGenerativeAI } from "@google/generative-ai";
import cron from "node-cron";
import nodemailer from "nodemailer";

const thoughtByPrompt = asyncHandler( async (req, res) => {
    
    const { prompt } =  req.body
    if(!prompt){
        throw new ApiError(401, "Please enter a prompt to genrate the thoughts")
    }
    

    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })
    
    const result = await model.generateContent("A single thought of a medium lenght not more than 50 words" + prompt)
    
    return res.status(200)
    .json( new ApiResponse(200, result.response.text(), "Thoughts generated by prompt successfully!") )
})

const randomThought = asyncHandler( async (req, res) => {
    
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })
    
    const result = await model.generateContent("A single great random thought of 30 words")
    
    return res.status(200)
    .json( new ApiResponse(200, result.response.text(), "Thoughts generated by prompt successfully!") )
})

const subscribingToThought = asyncHandler( async (req, res) => {
    
    const { email } = req.body
    if(!email){
        throw new ApiError(401, "Provide email to continue")
    }

    cron.schedule('0 8 * * *', async () => {

        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })
        
        const result = await model.generateContent("A single great random thought of 30 words for a fresh morning!")
        if(!result){
            throw new ApiError(501, "Something went wrong with geminai")
        }

        console.log("result generated")

        const transporter = nodemailer.createTransport({
                service : "gmail",
                auth : {
                    user : "madhavv8528@gmail.com",
                    pass : process.env.GMAIL_PASS
                }
            })

        console.log("Transporter created")

            const thoughtMail = await transporter.sendMail({
                from : "madhavv8528@gmail.com",
                to : email,
                subject : "Your thought of the day!!! Love from DailyThoughts",
                text : result.response.text()
            })
            if(!thoughtMail){
                throw new ApiError(500, "Something went wrong while configuring emails.")
            }

            console.log("Chhla Chhla")
    })

    cron.schedule('0 20 * * *', async () => {

        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })
        
        const result = await model.generateContent("A single great random thought of 30 words for a evening motivation energy!")
        if(!result){
            throw new ApiError(501, "Something went wrong with geminai")
        }

        console.log("result generated")

        const transporter = nodemailer.createTransport({
                service : "gmail",
                auth : {
                    user : "madhavv8528@gmail.com",
                    pass : process.env.GMAIL_PASS
                }
            })

        console.log("Transporter created")

            const thoughtMail = await transporter.sendMail({
                from : "madhavv8528@gmail.com",
                to : email,
                subject : "Your evening motivatio!!! Love from DailyThoughts",
                text : result.response.text()
            })
            if(!thoughtMail){
                throw new ApiError(500, "Something went wrong while configuring emails.")
            }

            console.log("Chhla Chhla")
    })

    return res.status(200)
    .json( new ApiResponse(200, {}, "You are now subscribed to thoughts successfully!"))
})


export { thoughtByPrompt,
         randomThought,
         subscribingToThought
 }